// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/psfpro/gophermart/internal/gophermart/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/gofrs/uuid"
)

// TransactionRepository is an autogenerated mock type for the TransactionRepository type
type TransactionRepository struct {
	mock.Mock
}

type TransactionRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *TransactionRepository) EXPECT() *TransactionRepository_Expecter {
	return &TransactionRepository_Expecter{mock: &_m.Mock}
}

// GetAccrualsByUserID provides a mock function with given fields: ctx, userID
func (_m *TransactionRepository) GetAccrualsByUserID(ctx context.Context, userID uuid.UUID) ([]*domain.Transaction, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAccrualsByUserID")
	}

	var r0 []*domain.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*domain.Transaction, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*domain.Transaction); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionRepository_GetAccrualsByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccrualsByUserID'
type TransactionRepository_GetAccrualsByUserID_Call struct {
	*mock.Call
}

// GetAccrualsByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *TransactionRepository_Expecter) GetAccrualsByUserID(ctx interface{}, userID interface{}) *TransactionRepository_GetAccrualsByUserID_Call {
	return &TransactionRepository_GetAccrualsByUserID_Call{Call: _e.mock.On("GetAccrualsByUserID", ctx, userID)}
}

func (_c *TransactionRepository_GetAccrualsByUserID_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *TransactionRepository_GetAccrualsByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *TransactionRepository_GetAccrualsByUserID_Call) Return(_a0 []*domain.Transaction, _a1 error) *TransactionRepository_GetAccrualsByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TransactionRepository_GetAccrualsByUserID_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]*domain.Transaction, error)) *TransactionRepository_GetAccrualsByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByOrderNumber provides a mock function with given fields: ctx, orderNumber
func (_m *TransactionRepository) GetByOrderNumber(ctx context.Context, orderNumber domain.OrderNumber) (*domain.Transaction, error) {
	ret := _m.Called(ctx, orderNumber)

	if len(ret) == 0 {
		panic("no return value specified for GetByOrderNumber")
	}

	var r0 *domain.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.OrderNumber) (*domain.Transaction, error)); ok {
		return rf(ctx, orderNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.OrderNumber) *domain.Transaction); ok {
		r0 = rf(ctx, orderNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.OrderNumber) error); ok {
		r1 = rf(ctx, orderNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionRepository_GetByOrderNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByOrderNumber'
type TransactionRepository_GetByOrderNumber_Call struct {
	*mock.Call
}

// GetByOrderNumber is a helper method to define mock.On call
//   - ctx context.Context
//   - orderNumber domain.OrderNumber
func (_e *TransactionRepository_Expecter) GetByOrderNumber(ctx interface{}, orderNumber interface{}) *TransactionRepository_GetByOrderNumber_Call {
	return &TransactionRepository_GetByOrderNumber_Call{Call: _e.mock.On("GetByOrderNumber", ctx, orderNumber)}
}

func (_c *TransactionRepository_GetByOrderNumber_Call) Run(run func(ctx context.Context, orderNumber domain.OrderNumber)) *TransactionRepository_GetByOrderNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.OrderNumber))
	})
	return _c
}

func (_c *TransactionRepository_GetByOrderNumber_Call) Return(_a0 *domain.Transaction, _a1 error) *TransactionRepository_GetByOrderNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TransactionRepository_GetByOrderNumber_Call) RunAndReturn(run func(context.Context, domain.OrderNumber) (*domain.Transaction, error)) *TransactionRepository_GetByOrderNumber_Call {
	_c.Call.Return(run)
	return _c
}

// GetNewAccruals provides a mock function with given fields: ctx
func (_m *TransactionRepository) GetNewAccruals(ctx context.Context) ([]*domain.Transaction, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetNewAccruals")
	}

	var r0 []*domain.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*domain.Transaction, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*domain.Transaction); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionRepository_GetNewAccruals_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNewAccruals'
type TransactionRepository_GetNewAccruals_Call struct {
	*mock.Call
}

// GetNewAccruals is a helper method to define mock.On call
//   - ctx context.Context
func (_e *TransactionRepository_Expecter) GetNewAccruals(ctx interface{}) *TransactionRepository_GetNewAccruals_Call {
	return &TransactionRepository_GetNewAccruals_Call{Call: _e.mock.On("GetNewAccruals", ctx)}
}

func (_c *TransactionRepository_GetNewAccruals_Call) Run(run func(ctx context.Context)) *TransactionRepository_GetNewAccruals_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *TransactionRepository_GetNewAccruals_Call) Return(_a0 []*domain.Transaction, _a1 error) *TransactionRepository_GetNewAccruals_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TransactionRepository_GetNewAccruals_Call) RunAndReturn(run func(context.Context) ([]*domain.Transaction, error)) *TransactionRepository_GetNewAccruals_Call {
	_c.Call.Return(run)
	return _c
}

// GetWithdrawalsByUserID provides a mock function with given fields: ctx, userID
func (_m *TransactionRepository) GetWithdrawalsByUserID(ctx context.Context, userID uuid.UUID) ([]*domain.Transaction, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetWithdrawalsByUserID")
	}

	var r0 []*domain.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*domain.Transaction, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*domain.Transaction); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionRepository_GetWithdrawalsByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWithdrawalsByUserID'
type TransactionRepository_GetWithdrawalsByUserID_Call struct {
	*mock.Call
}

// GetWithdrawalsByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *TransactionRepository_Expecter) GetWithdrawalsByUserID(ctx interface{}, userID interface{}) *TransactionRepository_GetWithdrawalsByUserID_Call {
	return &TransactionRepository_GetWithdrawalsByUserID_Call{Call: _e.mock.On("GetWithdrawalsByUserID", ctx, userID)}
}

func (_c *TransactionRepository_GetWithdrawalsByUserID_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *TransactionRepository_GetWithdrawalsByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *TransactionRepository_GetWithdrawalsByUserID_Call) Return(_a0 []*domain.Transaction, _a1 error) *TransactionRepository_GetWithdrawalsByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TransactionRepository_GetWithdrawalsByUserID_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]*domain.Transaction, error)) *TransactionRepository_GetWithdrawalsByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, transaction
func (_m *TransactionRepository) Save(ctx context.Context, transaction *domain.Transaction) error {
	ret := _m.Called(ctx, transaction)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Transaction) error); ok {
		r0 = rf(ctx, transaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TransactionRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type TransactionRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - transaction *domain.Transaction
func (_e *TransactionRepository_Expecter) Save(ctx interface{}, transaction interface{}) *TransactionRepository_Save_Call {
	return &TransactionRepository_Save_Call{Call: _e.mock.On("Save", ctx, transaction)}
}

func (_c *TransactionRepository_Save_Call) Run(run func(ctx context.Context, transaction *domain.Transaction)) *TransactionRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Transaction))
	})
	return _c
}

func (_c *TransactionRepository_Save_Call) Return(_a0 error) *TransactionRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TransactionRepository_Save_Call) RunAndReturn(run func(context.Context, *domain.Transaction) error) *TransactionRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewTransactionRepository creates a new instance of TransactionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionRepository {
	mock := &TransactionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
